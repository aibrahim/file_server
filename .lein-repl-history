(use file-service.models.fs :reload)
(use 'file-service.models.fs :reload)
(ls "/tmp")
(use file-service.models.fs :reload)
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(use 'file-service.models.fs :reload)
(read-path "/tmp")
(read-path "/tmp/text.txt")
(read-path "/tmp")
(read-path "/tmp/.ICE-unix")
(conj [1 2 ] 3)
(cons [1 2 ] 4)
(cons 3[1 2 ])
(cons 3 [1 2 ])
{"lang/en" :hello}
(->> {"lang/en" :hello} (mapv (fn [[k v]] {(keyword k) v})))
(->> {"world/lang/en" :hello} (mapv (fn [[k v]] {(keyword k) v})))
(->> {"world/lang/en" :hello} (mapv (fn [[k v]] (keyword k) v}))
(->> {"world/lang/en" :hello} (mapv (fn [[k v]] (keyword k) v))
)
(->> {"world/lang/en" :hello} (mapv (fn [[k v]] [(keyword k) v])))
(->> {"world/lang/en" :hello} (mapv (fn [[k v]] [(keyword k) v])) (mapv (fn [[k v]] [(name k) v])))
(count "hello")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(read-path "/tmp/foo/lang")
(read-path "/tmp/foo/lang/en")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo/lang/en")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(use 'file-service.models.fs :reload)
(read-path "/tmp/foo")
(conj [1 2 3] 5)
(:require '[pantomime.mime :refer [mime-type-of]])
(mime-type-of "/tmp/foo/lang/en/hello")
(require '[pantomime.mime :refer [mime-type-of]])
(mime-type-of "/tmp/foo/lang/en/hello")
(mime-type-of (File. "/tmp/foo/lang/en/hello"))
(mime-type-of (clojure.java.io/File. "/tmp/foo/lang/en/hello"))
(File. "")
(mime-type-of (java.io/File. "/tmp/foo/lang/en/hello"))
(mime-type-of (java.io.File. "/tmp/foo/lang/en/hello"))
(require [pantomime.mime :as pm])
